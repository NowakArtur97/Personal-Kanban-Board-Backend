AWSTemplateFormatVersion: 2010-09-09
Description: Kanban Backend Board Template
Parameters:
  SshPort:
    Type: Number
    Description: SSH port
    Default: 22
    MinValue: 22
    MaxValue: 65535
  SourceCidr:
    Type: String
    Description: CIDR Block of IPv4 IP addresses allowed to access EC2 instance via SSH
    AllowedPattern: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: The value must be valid IPv4 CIDR block
    Default: 0.0.0.0/32
  InstanceType:
    Type: String
    Description: EC2 instance size
    Default: t2.micro
  ImageId:
    Type: String
    Description: EC2 instance image id
    Default: ami-07caf09b362be10b8
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an EC2 KeyPair to enable SSH access to the instance
    Default: kanban-board
  CodeBuildProjectName:
    Type: String
    Description: Name of the project in the CodeBuild
    Default: kanban-board-backend-997
  BuildSpecPath:
    Type: String
    Description: Path to buildspec.yml file for CodeBuild
    Default: buildspec.yml
  CodeBuildImage:
    Type: String
    Description: Image for CodeBuild
    Default: aws/codebuild/amazonlinux2-x86_64-standard:5.0
    AllowedValues:
      - aws/codebuild/amazonlinux2-x86_64-standard:2.0
      - aws/codebuild/amazonlinux2-aarch64-standard:3.0
      - aws/codebuild/amazonlinux2-x86_64-standard:4.0
      - aws/codebuild/amazonlinux2-x86_64-standard:5.0
      - aws/codebuild/amazonlinux2-x86_64-standard:corretto11
      - aws/codebuild/amazonlinux2-x86_64-standard:corretto8
  CodeBuildComputeType:
    Type: String
    Description: Type of compute environment for CodeBuild
    Default: BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
      - BUILD_GENERAL1_XLARGE
      - BUILD_GENERAL1_2XLARGE
      - BUILD_LAMBDA_1GB
      - BUILD_LAMBDA_2GB
      - BUILD_LAMBDA_4GB
      - BUILD_LAMBDA_8GB
      - BUILD_LAMBDA_10GB
  BuildArtifactsS3BucketName:
    Type: String
    Description: S3 Bucket name for build artifacts
    Default: artifacts-kanban-board-backend-997
  GitHubRepositoryName:
    Type: String
    Description: Name of GitHub repository with Kanan Board backend project
    Default: Personal-Kanban-Board-Backend
  GitHubRepositoryURL:
    Type: String
    Description: URL for GitHub repository with Kanan Board backend project
    Default: https://github.com/NowakArtur97/Personal-Kanban-Board-Backend.git
  GitHubBranch:
    Type: String
    Description: GitHub branch with code for CodePipeline
    # TODO: Change
    Default: aws-cloudformation
  GitHubOAuthToken:
    Type: String
    Description: Thee GitHub Personal Access Token so CodePipeline can get the code
    Default: token
  GitHubBranchPattern:
    Type: String
    Description: GitHub branch with code for CodeBuild
    Default: ^refs/heads/aws-cloudformation
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: kanban-board-backend-vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: kanban-board-backend-igw
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: kanban-board-backend-rt
  RouteTableDefaultIPv4:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.16.0.0/27
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: kanban-board-backend-sn
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A security group for an EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref SourceCidr
          FromPort: !Ref SshPort
          ToPort: !Ref SshPort
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: kanban-board-backend-instance-profile
      Path: /
      Roles:
        - !Ref EC2InstanceRole
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: BuildArtifactsS3BucketPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}/*"
  BackendEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: kanban-board-backend-ec2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update
          yum install -y ruby
          yum install wget
          cd /home/ec2-user
          # wget https://aws-codedeploy-{region}.s3.{region}.amazonaws.com/latest/install
          wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          yum install -y python-pip
          pip install awscli
          dnf install -y java-21-amazon-corretto-devel
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource: !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}:*"
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${CodeBuildProjectName}-*"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: !Ref BuildSpecPath
      Environment:
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildImage
        ComputeType: !Ref CodeBuildComputeType
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub "/aws/codebuild/${CodeBuildProjectName}"
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    DependsOn: BackendEC2Instance
    Properties:
      ApplicationName: kanban-board-backend-codedeploy-application
  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters:
        - Key: "Name"
          Value: "kanban-board-backend-ec2"
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentGroupName: prod
      DeploymentConfigName: CodeDeployDefault.OneAtATime
  BuildArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BuildArtifactsS3BucketName
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelinePolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - iam:PassRole
                  - sns:Publish
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - codecommit:*
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:SetStackPolicy
                Resource: "*"
  CodePipelinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodeBuildProjectName
      RoleArn: !GetAtt CodePipelineRole.Arn
      PipelineType: "V2"
      ArtifactStore:
        Location: !Ref BuildArtifactsS3Bucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Repo: !Ref GitHubRepositoryName
                Branch: !Ref GitHubBranch
                Owner: NowakArtur97
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: source-output-artifacts
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: source-output-artifacts
              OutputArtifacts:
                - Name: build-output-artifacts
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: build-output-artifacts
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployGroup
              RunOrder: 1
  GithubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: KanbanBoardBackendGithubWebhook
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: true
      TargetAction: Source
      TargetPipeline: !Ref CodePipelinePipeline
      TargetPipelineVersion: !GetAtt CodePipelinePipeline.Version
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
  S3BucketCleanerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3BucketCleanerLambdaFunctionPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}"
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${BuildArtifactsS3Bucket}/*"
  S3BucketCleanerLambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt S3BucketCleanerLambdaFunction.Arn
  S3BucketCleanerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt S3BucketCleanerLambdaRole.Arn
      Environment:
        Variables:
          BUCKETS_TO_CLEAN: !Join [",", [!Ref BuildArtifactsS3Bucket]]
      Code:
        ZipFile: |
          import os.path
          import boto3
          import cfnresponse

          BUCKETS_TO_CLEAN = os.environ['BUCKETS_TO_CLEAN'].split(",")

          s3 = boto3.resource('s3')

          def clear_bucket(bucketName):
              s3.Bucket(bucketName).objects.all().delete()

          def lambda_handler(event, context):
              responseData = {}
              if event['RequestType'] == 'Delete':
                  for bucketName in BUCKETS_TO_CLEAN:
                      try:
                          clear_bucket(bucketName)
                          print("Successfully cleared bucket: " + bucketName)
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      except Exception as e:
                          print('Exception when cleaning bucket: ' + bucketName)
                          print(e)
                          cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
